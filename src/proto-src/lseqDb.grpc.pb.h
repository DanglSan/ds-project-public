// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lseqDb.proto
#ifndef GRPC_lseqDb_2eproto__INCLUDED
#define GRPC_lseqDb_2eproto__INCLUDED

#include "lseqDb.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace lseqdb {

class LSeqDatabase final {
 public:
  static constexpr char const* service_full_name() {
    return "lseqdb.LSeqDatabase";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //  Database API
    virtual ::grpc::Status GetValue(::grpc::ClientContext* context, const ::lseqdb::ReplicaKey& request, ::lseqdb::Value* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::Value>> AsyncGetValue(::grpc::ClientContext* context, const ::lseqdb::ReplicaKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::Value>>(AsyncGetValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::Value>> PrepareAsyncGetValue(::grpc::ClientContext* context, const ::lseqdb::ReplicaKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::Value>>(PrepareAsyncGetValueRaw(context, request, cq));
    }
    virtual ::grpc::Status Put(::grpc::ClientContext* context, const ::lseqdb::PutRequest& request, ::lseqdb::LSeq* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::LSeq>> AsyncPut(::grpc::ClientContext* context, const ::lseqdb::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::LSeq>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::LSeq>> PrepareAsyncPut(::grpc::ClientContext* context, const ::lseqdb::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::LSeq>>(PrepareAsyncPutRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::lseqdb::Key& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDelete(::grpc::ClientContext* context, const ::lseqdb::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::lseqdb::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    //  Supports search only within one replica
    virtual ::grpc::Status SeekGet(::grpc::ClientContext* context, const ::lseqdb::SeekGetRequest& request, ::lseqdb::DBItems* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::DBItems>> AsyncSeekGet(::grpc::ClientContext* context, const ::lseqdb::SeekGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::DBItems>>(AsyncSeekGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::DBItems>> PrepareAsyncSeekGet(::grpc::ClientContext* context, const ::lseqdb::SeekGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::DBItems>>(PrepareAsyncSeekGetRaw(context, request, cq));
    }
    //  System calls for synchronization
    virtual ::grpc::Status SyncGet_(::grpc::ClientContext* context, const ::lseqdb::SyncGetRequest& request, ::lseqdb::LSeq* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::LSeq>> AsyncSyncGet_(::grpc::ClientContext* context, const ::lseqdb::SyncGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::LSeq>>(AsyncSyncGet_Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::LSeq>> PrepareAsyncSyncGet_(::grpc::ClientContext* context, const ::lseqdb::SyncGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::LSeq>>(PrepareAsyncSyncGet_Raw(context, request, cq));
    }
    virtual ::grpc::Status SyncPut_(::grpc::ClientContext* context, const ::lseqdb::DBItems& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncSyncPut_(::grpc::ClientContext* context, const ::lseqdb::DBItems& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncSyncPut_Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncSyncPut_(::grpc::ClientContext* context, const ::lseqdb::DBItems& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncSyncPut_Raw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      //  Database API
      virtual void GetValue(::grpc::ClientContext* context, const ::lseqdb::ReplicaKey* request, ::lseqdb::Value* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetValue(::grpc::ClientContext* context, const ::lseqdb::ReplicaKey* request, ::lseqdb::Value* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Put(::grpc::ClientContext* context, const ::lseqdb::PutRequest* request, ::lseqdb::LSeq* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Put(::grpc::ClientContext* context, const ::lseqdb::PutRequest* request, ::lseqdb::LSeq* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::lseqdb::Key* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::lseqdb::Key* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //  Supports search only within one replica
      virtual void SeekGet(::grpc::ClientContext* context, const ::lseqdb::SeekGetRequest* request, ::lseqdb::DBItems* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SeekGet(::grpc::ClientContext* context, const ::lseqdb::SeekGetRequest* request, ::lseqdb::DBItems* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //  System calls for synchronization
      virtual void SyncGet_(::grpc::ClientContext* context, const ::lseqdb::SyncGetRequest* request, ::lseqdb::LSeq* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SyncGet_(::grpc::ClientContext* context, const ::lseqdb::SyncGetRequest* request, ::lseqdb::LSeq* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SyncPut_(::grpc::ClientContext* context, const ::lseqdb::DBItems* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SyncPut_(::grpc::ClientContext* context, const ::lseqdb::DBItems* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::Value>* AsyncGetValueRaw(::grpc::ClientContext* context, const ::lseqdb::ReplicaKey& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::Value>* PrepareAsyncGetValueRaw(::grpc::ClientContext* context, const ::lseqdb::ReplicaKey& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::LSeq>* AsyncPutRaw(::grpc::ClientContext* context, const ::lseqdb::PutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::LSeq>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::lseqdb::PutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::lseqdb::Key& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::lseqdb::Key& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::DBItems>* AsyncSeekGetRaw(::grpc::ClientContext* context, const ::lseqdb::SeekGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::DBItems>* PrepareAsyncSeekGetRaw(::grpc::ClientContext* context, const ::lseqdb::SeekGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::LSeq>* AsyncSyncGet_Raw(::grpc::ClientContext* context, const ::lseqdb::SyncGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lseqdb::LSeq>* PrepareAsyncSyncGet_Raw(::grpc::ClientContext* context, const ::lseqdb::SyncGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncSyncPut_Raw(::grpc::ClientContext* context, const ::lseqdb::DBItems& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncSyncPut_Raw(::grpc::ClientContext* context, const ::lseqdb::DBItems& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetValue(::grpc::ClientContext* context, const ::lseqdb::ReplicaKey& request, ::lseqdb::Value* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lseqdb::Value>> AsyncGetValue(::grpc::ClientContext* context, const ::lseqdb::ReplicaKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lseqdb::Value>>(AsyncGetValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lseqdb::Value>> PrepareAsyncGetValue(::grpc::ClientContext* context, const ::lseqdb::ReplicaKey& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lseqdb::Value>>(PrepareAsyncGetValueRaw(context, request, cq));
    }
    ::grpc::Status Put(::grpc::ClientContext* context, const ::lseqdb::PutRequest& request, ::lseqdb::LSeq* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lseqdb::LSeq>> AsyncPut(::grpc::ClientContext* context, const ::lseqdb::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lseqdb::LSeq>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lseqdb::LSeq>> PrepareAsyncPut(::grpc::ClientContext* context, const ::lseqdb::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lseqdb::LSeq>>(PrepareAsyncPutRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::lseqdb::Key& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDelete(::grpc::ClientContext* context, const ::lseqdb::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::lseqdb::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status SeekGet(::grpc::ClientContext* context, const ::lseqdb::SeekGetRequest& request, ::lseqdb::DBItems* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lseqdb::DBItems>> AsyncSeekGet(::grpc::ClientContext* context, const ::lseqdb::SeekGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lseqdb::DBItems>>(AsyncSeekGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lseqdb::DBItems>> PrepareAsyncSeekGet(::grpc::ClientContext* context, const ::lseqdb::SeekGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lseqdb::DBItems>>(PrepareAsyncSeekGetRaw(context, request, cq));
    }
    ::grpc::Status SyncGet_(::grpc::ClientContext* context, const ::lseqdb::SyncGetRequest& request, ::lseqdb::LSeq* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lseqdb::LSeq>> AsyncSyncGet_(::grpc::ClientContext* context, const ::lseqdb::SyncGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lseqdb::LSeq>>(AsyncSyncGet_Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lseqdb::LSeq>> PrepareAsyncSyncGet_(::grpc::ClientContext* context, const ::lseqdb::SyncGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lseqdb::LSeq>>(PrepareAsyncSyncGet_Raw(context, request, cq));
    }
    ::grpc::Status SyncPut_(::grpc::ClientContext* context, const ::lseqdb::DBItems& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncSyncPut_(::grpc::ClientContext* context, const ::lseqdb::DBItems& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncSyncPut_Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncSyncPut_(::grpc::ClientContext* context, const ::lseqdb::DBItems& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncSyncPut_Raw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetValue(::grpc::ClientContext* context, const ::lseqdb::ReplicaKey* request, ::lseqdb::Value* response, std::function<void(::grpc::Status)>) override;
      void GetValue(::grpc::ClientContext* context, const ::lseqdb::ReplicaKey* request, ::lseqdb::Value* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Put(::grpc::ClientContext* context, const ::lseqdb::PutRequest* request, ::lseqdb::LSeq* response, std::function<void(::grpc::Status)>) override;
      void Put(::grpc::ClientContext* context, const ::lseqdb::PutRequest* request, ::lseqdb::LSeq* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Delete(::grpc::ClientContext* context, const ::lseqdb::Key* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::lseqdb::Key* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SeekGet(::grpc::ClientContext* context, const ::lseqdb::SeekGetRequest* request, ::lseqdb::DBItems* response, std::function<void(::grpc::Status)>) override;
      void SeekGet(::grpc::ClientContext* context, const ::lseqdb::SeekGetRequest* request, ::lseqdb::DBItems* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SyncGet_(::grpc::ClientContext* context, const ::lseqdb::SyncGetRequest* request, ::lseqdb::LSeq* response, std::function<void(::grpc::Status)>) override;
      void SyncGet_(::grpc::ClientContext* context, const ::lseqdb::SyncGetRequest* request, ::lseqdb::LSeq* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SyncPut_(::grpc::ClientContext* context, const ::lseqdb::DBItems* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void SyncPut_(::grpc::ClientContext* context, const ::lseqdb::DBItems* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::lseqdb::Value>* AsyncGetValueRaw(::grpc::ClientContext* context, const ::lseqdb::ReplicaKey& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lseqdb::Value>* PrepareAsyncGetValueRaw(::grpc::ClientContext* context, const ::lseqdb::ReplicaKey& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lseqdb::LSeq>* AsyncPutRaw(::grpc::ClientContext* context, const ::lseqdb::PutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lseqdb::LSeq>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::lseqdb::PutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::lseqdb::Key& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::lseqdb::Key& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lseqdb::DBItems>* AsyncSeekGetRaw(::grpc::ClientContext* context, const ::lseqdb::SeekGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lseqdb::DBItems>* PrepareAsyncSeekGetRaw(::grpc::ClientContext* context, const ::lseqdb::SeekGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lseqdb::LSeq>* AsyncSyncGet_Raw(::grpc::ClientContext* context, const ::lseqdb::SyncGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lseqdb::LSeq>* PrepareAsyncSyncGet_Raw(::grpc::ClientContext* context, const ::lseqdb::SyncGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncSyncPut_Raw(::grpc::ClientContext* context, const ::lseqdb::DBItems& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncSyncPut_Raw(::grpc::ClientContext* context, const ::lseqdb::DBItems& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetValue_;
    const ::grpc::internal::RpcMethod rpcmethod_Put_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_SeekGet_;
    const ::grpc::internal::RpcMethod rpcmethod_SyncGet__;
    const ::grpc::internal::RpcMethod rpcmethod_SyncPut__;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //  Database API
    virtual ::grpc::Status GetValue(::grpc::ServerContext* context, const ::lseqdb::ReplicaKey* request, ::lseqdb::Value* response);
    virtual ::grpc::Status Put(::grpc::ServerContext* context, const ::lseqdb::PutRequest* request, ::lseqdb::LSeq* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::lseqdb::Key* request, ::google::protobuf::Empty* response);
    //  Supports search only within one replica
    virtual ::grpc::Status SeekGet(::grpc::ServerContext* context, const ::lseqdb::SeekGetRequest* request, ::lseqdb::DBItems* response);
    //  System calls for synchronization
    virtual ::grpc::Status SyncGet_(::grpc::ServerContext* context, const ::lseqdb::SyncGetRequest* request, ::lseqdb::LSeq* response);
    virtual ::grpc::Status SyncPut_(::grpc::ServerContext* context, const ::lseqdb::DBItems* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetValue() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValue(::grpc::ServerContext* /*context*/, const ::lseqdb::ReplicaKey* /*request*/, ::lseqdb::Value* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetValue(::grpc::ServerContext* context, ::lseqdb::ReplicaKey* request, ::grpc::ServerAsyncResponseWriter< ::lseqdb::Value>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Put() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::lseqdb::PutRequest* /*request*/, ::lseqdb::LSeq* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::lseqdb::PutRequest* request, ::grpc::ServerAsyncResponseWriter< ::lseqdb::LSeq>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::lseqdb::Key* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::lseqdb::Key* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SeekGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SeekGet() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SeekGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SeekGet(::grpc::ServerContext* /*context*/, const ::lseqdb::SeekGetRequest* /*request*/, ::lseqdb::DBItems* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSeekGet(::grpc::ServerContext* context, ::lseqdb::SeekGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::lseqdb::DBItems>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SyncGet_ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SyncGet_() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SyncGet_() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncGet_(::grpc::ServerContext* /*context*/, const ::lseqdb::SyncGetRequest* /*request*/, ::lseqdb::LSeq* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncGet_(::grpc::ServerContext* context, ::lseqdb::SyncGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::lseqdb::LSeq>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SyncPut_ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SyncPut_() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SyncPut_() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncPut_(::grpc::ServerContext* /*context*/, const ::lseqdb::DBItems* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncPut_(::grpc::ServerContext* context, ::lseqdb::DBItems* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetValue<WithAsyncMethod_Put<WithAsyncMethod_Delete<WithAsyncMethod_SeekGet<WithAsyncMethod_SyncGet_<WithAsyncMethod_SyncPut_<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetValue() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::lseqdb::ReplicaKey, ::lseqdb::Value>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lseqdb::ReplicaKey* request, ::lseqdb::Value* response) { return this->GetValue(context, request, response); }));}
    void SetMessageAllocatorFor_GetValue(
        ::grpc::MessageAllocator< ::lseqdb::ReplicaKey, ::lseqdb::Value>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lseqdb::ReplicaKey, ::lseqdb::Value>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValue(::grpc::ServerContext* /*context*/, const ::lseqdb::ReplicaKey* /*request*/, ::lseqdb::Value* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetValue(
      ::grpc::CallbackServerContext* /*context*/, const ::lseqdb::ReplicaKey* /*request*/, ::lseqdb::Value* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Put() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::lseqdb::PutRequest, ::lseqdb::LSeq>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lseqdb::PutRequest* request, ::lseqdb::LSeq* response) { return this->Put(context, request, response); }));}
    void SetMessageAllocatorFor_Put(
        ::grpc::MessageAllocator< ::lseqdb::PutRequest, ::lseqdb::LSeq>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lseqdb::PutRequest, ::lseqdb::LSeq>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::lseqdb::PutRequest* /*request*/, ::lseqdb::LSeq* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Put(
      ::grpc::CallbackServerContext* /*context*/, const ::lseqdb::PutRequest* /*request*/, ::lseqdb::LSeq* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::lseqdb::Key, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lseqdb::Key* request, ::google::protobuf::Empty* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::MessageAllocator< ::lseqdb::Key, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lseqdb::Key, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::lseqdb::Key* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::lseqdb::Key* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SeekGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SeekGet() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::lseqdb::SeekGetRequest, ::lseqdb::DBItems>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lseqdb::SeekGetRequest* request, ::lseqdb::DBItems* response) { return this->SeekGet(context, request, response); }));}
    void SetMessageAllocatorFor_SeekGet(
        ::grpc::MessageAllocator< ::lseqdb::SeekGetRequest, ::lseqdb::DBItems>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lseqdb::SeekGetRequest, ::lseqdb::DBItems>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SeekGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SeekGet(::grpc::ServerContext* /*context*/, const ::lseqdb::SeekGetRequest* /*request*/, ::lseqdb::DBItems* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SeekGet(
      ::grpc::CallbackServerContext* /*context*/, const ::lseqdb::SeekGetRequest* /*request*/, ::lseqdb::DBItems* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SyncGet_ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SyncGet_() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::lseqdb::SyncGetRequest, ::lseqdb::LSeq>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lseqdb::SyncGetRequest* request, ::lseqdb::LSeq* response) { return this->SyncGet_(context, request, response); }));}
    void SetMessageAllocatorFor_SyncGet_(
        ::grpc::MessageAllocator< ::lseqdb::SyncGetRequest, ::lseqdb::LSeq>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lseqdb::SyncGetRequest, ::lseqdb::LSeq>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SyncGet_() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncGet_(::grpc::ServerContext* /*context*/, const ::lseqdb::SyncGetRequest* /*request*/, ::lseqdb::LSeq* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SyncGet_(
      ::grpc::CallbackServerContext* /*context*/, const ::lseqdb::SyncGetRequest* /*request*/, ::lseqdb::LSeq* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SyncPut_ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SyncPut_() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::lseqdb::DBItems, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::lseqdb::DBItems* request, ::google::protobuf::Empty* response) { return this->SyncPut_(context, request, response); }));}
    void SetMessageAllocatorFor_SyncPut_(
        ::grpc::MessageAllocator< ::lseqdb::DBItems, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::lseqdb::DBItems, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SyncPut_() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncPut_(::grpc::ServerContext* /*context*/, const ::lseqdb::DBItems* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SyncPut_(
      ::grpc::CallbackServerContext* /*context*/, const ::lseqdb::DBItems* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetValue<WithCallbackMethod_Put<WithCallbackMethod_Delete<WithCallbackMethod_SeekGet<WithCallbackMethod_SyncGet_<WithCallbackMethod_SyncPut_<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetValue() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValue(::grpc::ServerContext* /*context*/, const ::lseqdb::ReplicaKey* /*request*/, ::lseqdb::Value* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Put() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::lseqdb::PutRequest* /*request*/, ::lseqdb::LSeq* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::lseqdb::Key* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SeekGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SeekGet() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SeekGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SeekGet(::grpc::ServerContext* /*context*/, const ::lseqdb::SeekGetRequest* /*request*/, ::lseqdb::DBItems* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SyncGet_ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SyncGet_() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SyncGet_() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncGet_(::grpc::ServerContext* /*context*/, const ::lseqdb::SyncGetRequest* /*request*/, ::lseqdb::LSeq* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SyncPut_ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SyncPut_() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SyncPut_() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncPut_(::grpc::ServerContext* /*context*/, const ::lseqdb::DBItems* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetValue() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValue(::grpc::ServerContext* /*context*/, const ::lseqdb::ReplicaKey* /*request*/, ::lseqdb::Value* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetValue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Put() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::lseqdb::PutRequest* /*request*/, ::lseqdb::LSeq* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::lseqdb::Key* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SeekGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SeekGet() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SeekGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SeekGet(::grpc::ServerContext* /*context*/, const ::lseqdb::SeekGetRequest* /*request*/, ::lseqdb::DBItems* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSeekGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SyncGet_ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SyncGet_() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SyncGet_() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncGet_(::grpc::ServerContext* /*context*/, const ::lseqdb::SyncGetRequest* /*request*/, ::lseqdb::LSeq* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncGet_(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SyncPut_ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SyncPut_() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SyncPut_() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncPut_(::grpc::ServerContext* /*context*/, const ::lseqdb::DBItems* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncPut_(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetValue() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetValue(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValue(::grpc::ServerContext* /*context*/, const ::lseqdb::ReplicaKey* /*request*/, ::lseqdb::Value* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetValue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Put() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Put(context, request, response); }));
    }
    ~WithRawCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::lseqdb::PutRequest* /*request*/, ::lseqdb::LSeq* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Put(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~WithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::lseqdb::Key* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SeekGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SeekGet() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SeekGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_SeekGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SeekGet(::grpc::ServerContext* /*context*/, const ::lseqdb::SeekGetRequest* /*request*/, ::lseqdb::DBItems* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SeekGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SyncGet_ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SyncGet_() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SyncGet_(context, request, response); }));
    }
    ~WithRawCallbackMethod_SyncGet_() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncGet_(::grpc::ServerContext* /*context*/, const ::lseqdb::SyncGetRequest* /*request*/, ::lseqdb::LSeq* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SyncGet_(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SyncPut_ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SyncPut_() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SyncPut_(context, request, response); }));
    }
    ~WithRawCallbackMethod_SyncPut_() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncPut_(::grpc::ServerContext* /*context*/, const ::lseqdb::DBItems* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SyncPut_(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetValue() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lseqdb::ReplicaKey, ::lseqdb::Value>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lseqdb::ReplicaKey, ::lseqdb::Value>* streamer) {
                       return this->StreamedGetValue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetValue(::grpc::ServerContext* /*context*/, const ::lseqdb::ReplicaKey* /*request*/, ::lseqdb::Value* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lseqdb::ReplicaKey,::lseqdb::Value>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Put() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lseqdb::PutRequest, ::lseqdb::LSeq>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lseqdb::PutRequest, ::lseqdb::LSeq>* streamer) {
                       return this->StreamedPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::lseqdb::PutRequest* /*request*/, ::lseqdb::LSeq* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lseqdb::PutRequest,::lseqdb::LSeq>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lseqdb::Key, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lseqdb::Key, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::lseqdb::Key* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lseqdb::Key,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SeekGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SeekGet() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lseqdb::SeekGetRequest, ::lseqdb::DBItems>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lseqdb::SeekGetRequest, ::lseqdb::DBItems>* streamer) {
                       return this->StreamedSeekGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SeekGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SeekGet(::grpc::ServerContext* /*context*/, const ::lseqdb::SeekGetRequest* /*request*/, ::lseqdb::DBItems* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSeekGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lseqdb::SeekGetRequest,::lseqdb::DBItems>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SyncGet_ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SyncGet_() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lseqdb::SyncGetRequest, ::lseqdb::LSeq>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lseqdb::SyncGetRequest, ::lseqdb::LSeq>* streamer) {
                       return this->StreamedSyncGet_(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SyncGet_() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SyncGet_(::grpc::ServerContext* /*context*/, const ::lseqdb::SyncGetRequest* /*request*/, ::lseqdb::LSeq* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSyncGet_(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lseqdb::SyncGetRequest,::lseqdb::LSeq>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SyncPut_ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SyncPut_() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::lseqdb::DBItems, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::lseqdb::DBItems, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedSyncPut_(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SyncPut_() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SyncPut_(::grpc::ServerContext* /*context*/, const ::lseqdb::DBItems* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSyncPut_(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lseqdb::DBItems,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetValue<WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_SeekGet<WithStreamedUnaryMethod_SyncGet_<WithStreamedUnaryMethod_SyncPut_<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetValue<WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_SeekGet<WithStreamedUnaryMethod_SyncGet_<WithStreamedUnaryMethod_SyncPut_<Service > > > > > > StreamedService;
};

}  // namespace lseqdb


#endif  // GRPC_lseqDb_2eproto__INCLUDED
